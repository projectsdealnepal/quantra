[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2025-08-15 16:49:49.746875",
  "module": null,
  "name": "Item Filter For Pharmacy in Sales Invoice",
  "script": "frappe.ui.form.on('Sales Invoice', {\r\n    onload: function(frm) {\r\n        if (frappe.user.has_role(\"Pharmacy Billing Cashier\")) {\r\n            \r\n            // Function to filter Item field for each row\r\n            const set_item_filter = function(doc, cdt, cdn) {\r\n                let row = frappe.get_doc(cdt, cdn);\r\n                frappe.ui.form.on(cdt, {\r\n                    items_add: function(frm2, cdt2, cdn2) {\r\n                        let child = frappe.get_doc(cdt2, cdn2);\r\n                        child.item_code = null; // reset value\r\n                        frm2.fields_dict['items'].grid.get_field('item_code').get_query = function(doc, cdt, cdn) {\r\n                            return {\r\n                                filters: {\r\n                                    'item_group': 'Medicines'\r\n                                }\r\n                            };\r\n                        }\r\n                    }\r\n                });\r\n            };\r\n\r\n            // Apply filter for existing rows\r\n            frm.doc.items.forEach(function(row) {\r\n                set_item_filter(frm.doc, row.doctype, row.name);\r\n            });\r\n\r\n            // Apply filter for any new row added\r\n            frm.fields_dict['items'].grid.get_field('item_code').get_query = function(doc, cdt, cdn) {\r\n                return {\r\n                    filters: {\r\n                        'item_group': 'Medicines'\r\n                    }\r\n                };\r\n            };\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient Encounter",
  "enabled": 1,
  "modified": "2025-08-21 11:27:49.551787",
  "module": null,
  "name": "Patient Encounter with other encounter list",
  "script": "function load_previous_encounters(frm) {\r\n    if (frm.doc.patient) {\r\n        frappe.call({\r\n            method: \"frappe.client.get_list\",\r\n            args: {\r\n                doctype: \"Patient Encounter\",\r\n                filters: {\r\n                    patient: frm.doc.patient,\r\n                    name: [\"!=\", frm.doc.name]  // exclude current one\r\n                },\r\n                fields: [\"name\", \"encounter_date\", \"practitioner\", \"status\", \"docstatus\"],\r\n                order_by: \"encounter_date desc\"\r\n            },\r\n            callback: function(r) {\r\n                // Only rebuild if table is empty (avoid dirty state loop)\r\n                if (!frm.doc.custom_previous_encounters?.length) {\r\n                    frm.clear_table(\"custom_previous_encounters\");\r\n                    if (r.message) {\r\n                        r.message.forEach(enc => {\r\n                            let row = frm.add_child(\"custom_previous_encounters\");\r\n                            row.encounter = enc.name;\r\n                            row.encounter_date = enc.encounter_date;\r\n                            row.practitioner = enc.practitioner;\r\n\r\n                            // Status handling\r\n                            if (enc.docstatus === 0) {\r\n                                row.status = \"Draft\";\r\n                            } else if (enc.docstatus === 1) {\r\n                                row.status = enc.status || \"Completed\";\r\n                            } else if (enc.docstatus === 2) {\r\n                                row.status = \"Cancelled\";\r\n                            }\r\n                        });\r\n                    }\r\n                    frm.refresh_field(\"custom_previous_encounters\");\r\n                }\r\n            }\r\n        });\r\n    } else {\r\n        frm.clear_table(\"custom_previous_encounters\");\r\n        frm.refresh_field(\"custom_previous_encounters\");\r\n    }\r\n}\r\n\r\nfrappe.ui.form.on(\"Patient Encounter\", {\r\n    patient: function(frm) {\r\n        // only reload when patient is chosen/changed\r\n        load_previous_encounters(frm);\r\n    },\r\n    after_save: function(frm) {\r\n        // reload after save so that latest encounter joins history\r\n        load_previous_encounters(frm);\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient Encounter",
  "enabled": 1,
  "modified": "2025-08-21 15:23:22.566160",
  "module": null,
  "name": "Previous Encounter Medication List Auto Fill",
  "script": "frappe.ui.form.on(\"Patient Encounter\", {\r\n    custom_get_medications_from_previous_encounter: function(frm) {\r\n        if (!frm.doc.patient) {\r\n            frappe.msgprint(\"Please select a patient first.\");\r\n            return;\r\n        }\r\n\r\n        frappe.call({\r\n            method: \"frappe.client.get_list\",\r\n            args: {\r\n                doctype: \"Patient Encounter\",\r\n                filters: {\r\n                    patient: frm.doc.patient,\r\n                    name: [\"!=\", frm.doc.name]  // exclude current encounter\r\n                },\r\n                fields: [\"name\", \"encounter_date\"],\r\n                order_by: \"encounter_date desc\",\r\n                limit: 1\r\n            },\r\n            callback: function(r) {\r\n                if (r.message && r.message.length > 0) {\r\n                    let prev_encounter = r.message[0].name;\r\n\r\n                    frappe.call({\r\n                        method: \"frappe.client.get\",\r\n                        args: {\r\n                            doctype: \"Patient Encounter\",\r\n                            name: prev_encounter\r\n                        },\r\n                        callback: function(res) {\r\n                            if (res.message && res.message.drug_prescription) {\r\n                                res.message.drug_prescription.forEach(drug => {\r\n                                    let row = frm.add_child(\"drug_prescription\");\r\n                                    row.custom_item = drug.custom_item;\r\n                                    row.drug_code = drug.drug_code;\r\n                                    row.drug_name = drug.drug_name;\r\n                                    row.strength = drug.strength;\r\n                                    row.strength_uom = drug.strength_uom;\r\n                                    row.dosage_form = drug.dosage_form;\r\n                                    row.dosage = drug.dosage;\r\n                                    row.dosage_by_interval = drug.dosage_by_interval;\r\n                                    row.interval = drug.interval;\r\n                                    row.interval_uom = drug.interval_uom;\r\n                                    row.period = drug.period;\r\n                                    row.number_of_repeats_allowed = drug.number_of_repeats_allowed;\r\n                                    row.intent = drug.intent;\r\n                                    row.priority = drug.priority;\r\n                                    row.comment = drug.comment;\r\n                                });\r\n                                frm.refresh_field(\"drug_prescription\");\r\n                                // frappe.msgprint(`Medications imported from encounter ${prev_encounter}`);\r\n                            } else {\r\n                                frappe.msgprint(\"No medications found in previous encounter.\");\r\n                            }\r\n                        }\r\n                    });\r\n                } else {\r\n                    frappe.msgprint(\"No previous encounter found for this patient.\");\r\n                }\r\n            }\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient Encounter",
  "enabled": 0,
  "modified": "2025-09-05 10:51:47.367632",
  "module": null,
  "name": "Medication Administration",
  "script": "frappe.ui.form.on(\"Patient Encounter\", {\r\n    on_submit: function(frm) {\r\n        // Only proceed for inpatient encounters\r\n        if (!frm.doc.inpatient_record) return;\r\n\r\n        // Skip if no drug prescriptions\r\n        if (!frm.doc.drug_prescription || frm.doc.drug_prescription.length === 0) return;\r\n\r\n        // Check if Medication Order already exists\r\n        frappe.call({\r\n            method: \"frappe.client.get_list\",\r\n            args: {\r\n                doctype: \"Inpatient Medication Order\",\r\n                filters: { patient_encounter: frm.doc.name },\r\n                limit: 1\r\n            },\r\n            callback: function(r) {\r\n                if (r.message && r.message.length > 0) return;\r\n\r\n                // Prepare child rows from drug_prescription\r\n                let child_rows = frm.doc.drug_prescription.map(drug => ({\r\n                    drug: drug.drug_code,\r\n                    drug_name: drug.drug_name,\r\n                    dosage: drug.dosage,\r\n                    period: drug.period,\r\n                    dosage_form: drug.dosage_form,\r\n                    number_of_repeats_allowed: drug.number_of_repeats_allowed || 0,\r\n                    is_given: 0\r\n                }));\r\n\r\n                // Prepare parent document with child table included\r\n                let med_order_doc = {\r\n                    doctype: \"Inpatient Medication Order\",\r\n                    patient: frm.doc.patient,\r\n                    patient_encounter: frm.doc.name,\r\n                    start_date: frm.doc.encounter_date,\r\n                    encounter_date: frm.doc.encounter_date,\r\n                    medication_order_entry: child_rows\r\n                };\r\n\r\n                // Insert Medication Order\r\n                frappe.call({\r\n                    method: \"frappe.client.insert\",\r\n                    args: { doc: med_order_doc },\r\n                    callback: function(res) {\r\n                        // frappe.msgprint(`Medication Order ${res.message.name} created with medications.`);\r\n                        // Open the Medication Order form to see child table\r\n                        frappe.set_route(\"Form\", \"Inpatient Medication Order\", res.message.name);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2025-08-25 10:40:19.241759",
  "module": null,
  "name": "Sales Order - Get From Encounter",
  "script": "frappe.ui.form.on(\"Sales Order\", {\n    refresh: function(frm) {\n        if (!frm.custom_get_from_prescription_btn_added) {\n            frm.add_custom_button(__('Get From Prescription'), function() {\n                frm.trigger(\"custom_get_from_prescription\");\n            });\n            frm.custom_get_from_prescription_btn_added = true;\n        }\n    },\n\n    custom_get_from_prescription: function(frm) {\n        if (!frm.doc.customer) {\n            frappe.msgprint(__('Please select a Customer first'));\n            return;\n        }\n\n        // Step 1: Get Patient linked to this Customer\n        frappe.call({\n            method: \"frappe.client.get_list\",\n            args: {\n                doctype: \"Patient\",\n                filters: { customer: frm.doc.customer },\n                fields: [\"name\"],\n                limit: 1\n            },\n            callback: function(r) {\n                if (!r.message || r.message.length === 0) {\n                    frappe.msgprint(__('No Patient linked with this Customer'));\n                    return;\n                }\n                let patient = r.message[0].name;\n\n                // Step 2: Get latest Encounter\n                frappe.call({\n                    method: \"frappe.client.get_list\",\n                    args: {\n                        doctype: \"Patient Encounter\",\n                        filters: { patient: patient },\n                        fields: [\"name\", \"encounter_date\", \"creation\"],\n                        order_by: \"encounter_date desc, creation desc\",\n                        limit: 1\n                    },\n                    callback: function(enc) {\n                        if (!enc.message || enc.message.length === 0) {\n                            frappe.msgprint(__('No Patient Encounter found for this Patient'));\n                            return;\n                        }\n\n                        let encounter = enc.message[0].name;\n                        console.log(\"Using Encounter:\", encounter, enc.message[0]);\n\n                        // Step 3: Fetch Encounter doc\n                        frappe.call({\n                            method: \"frappe.client.get\",\n                            args: {\n                                doctype: \"Patient Encounter\",\n                                name: encounter\n                            },\n                            callback: async function(res) {\n                                if (!res.message) return;\n\n                                let encounter_doc = res.message;\n                                if (!encounter_doc.drug_prescription || encounter_doc.drug_prescription.length === 0) {\n                                    frappe.msgprint(__('No medications found in latest Encounter'));\n                                    return;\n                                }\n\n                                frm.clear_table(\"items\");\n                                let price_list = frm.doc.selling_price_list || frappe.defaults.get_default(\"selling_price_list\");\n                                let default_delivery = frm.doc.delivery_date || frappe.datetime.nowdate();\n\n                                for (const drug of encounter_doc.drug_prescription) {\n                                    let row = frm.add_child(\"items\");\n\n                                    row.item_code = drug.drug_code;\n                                    row.item_name = drug.drug_name;\n                                    row.description = drug.drug_name;\n\n                                    // --- Calculate Quantity ---\n                                    let dailyQty = parseDosagePattern(drug.dosage);\n                                    if (dailyQty == null || dailyQty <= 0) {\n                                        if (drug.dosage_by_interval) {\n                                            dailyQty = perDayFromInterval(drug.interval, drug.interval_uom);\n                                        }\n                                    }\n                                    if (!Number.isFinite(dailyQty) || dailyQty <= 0) dailyQty = 1;\n\n                                    const days = parsePeriodDays(drug.period);\n                                    let qty = dailyQty * days;\n                                    if (!Number.isFinite(qty) || qty <= 0) qty = 1;\n\n                                    row.qty = dailyQty * days; \n                                    row.delivery_date = default_delivery;\n\n                                    // --- Get Rate ---\n                                    row.rate = await getItemRate(row.item_code, price_list);\n\n                                    // --- UOM (mandatory) ---\n                                    row.uom = await getItemUOM(row.item_code);\n\n                                    // --- Amount ---\n                                    row.amount = flt(row.qty) * flt(row.rate);\n                                }\n\n                                frm.refresh_field(\"items\");\n                                frm.trigger(\"calculate_taxes_and_totals\");\n\n                                // frappe.msgprint(__(\"Items imported from latest Encounter Prescription.\"));\n                            }\n                        });\n                    }\n                });\n            }\n        });\n    }\n});\n\n// --- Helpers ---\nfunction parseDosagePattern(dosage) {\n    if (!dosage) return null;\n\n    // Handle patterns like \"1-0-1\" or \"1-1-1\"\n    if (dosage.includes(\"-\")) {\n        return dosage.split(\"-\")\n            .map(x => parseInt(x) || 0)  // force integer\n            .reduce((a, b) => a + b, 0); // sum doses\n    }\n\n    // If dosage is a single number (e.g. \"2\")\n    let val = parseFloat(dosage);\n    return isNaN(val) ? null : val;\n}\n\n\nfunction parsePeriodDays(period) {\n    if (!period) return 1;\n    let match = period.match(/(\\d+)/);\n    let num = match ? parseInt(match[1]) : 1;\n    if (num <= 0) num = 1;\n\n    period = period.toLowerCase();\n    if (period.includes(\"day\")) return num;\n    if (period.includes(\"week\")) return num * 7;\n    if (period.includes(\"month\")) return num * 30;\n    return num;\n}\n\nfunction perDayFromInterval(interval, uom) {\n    if (!interval) return 1;\n    if (!uom) uom = \"Hour\";\n    if (uom.toLowerCase().startsWith(\"hour\")) return 24 / interval;\n    if (uom.toLowerCase().startsWith(\"day\")) return 1 / interval;\n    return 1;\n}\n\nasync function getItemRate(item_code, price_list) {\n    return new Promise(resolve => {\n        frappe.call({\n            method: \"frappe.client.get_value\",\n            args: {\n                doctype: \"Item Price\",\n                filters: { item_code, price_list },\n                fieldname: [\"price_list_rate\"]\n            },\n            callback: function(r) {\n                resolve(r.message && r.message.price_list_rate ? r.message.price_list_rate : 0);\n            }\n        });\n    });\n}\n\nasync function getItemUOM(item_code) {\n    return new Promise(resolve => {\n        frappe.call({\n            method: \"frappe.client.get_value\",\n            args: {\n                doctype: \"Item\",\n                filters: { name: item_code },\n                fieldname: [\"stock_uom\"]\n            },\n            callback: function(r) {\n                resolve(r.message && r.message.stock_uom ? r.message.stock_uom : \"Nos\");\n            }\n        });\n    });\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "License Manager",
  "enabled": 1,
  "modified": "2025-09-01 17:15:19.829044",
  "module": null,
  "name": "License Manager Filter Modules",
  "script": "frappe.ui.form.on('*', {\r\n    onload: function(frm) {\r\n        frappe.call({\r\n            method: \"quantra.api.license_manager_details.get_allowed_modules\",\r\n            // no company argument needed\r\n            callback: function(r) {\r\n                if (r.message) {\r\n                    let allowed_modules = r.message;\r\n                    let doctype_module = frappe.get_meta(frm.doctype).module;\r\n\r\n                    if (!allowed_modules.includes(doctype_module)) {\r\n                        frm.disable_form();\r\n                        frappe.msgprint(\r\n                            __(\"The module '{0}' is not licensed for company.\", [doctype_module])\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Company",
  "enabled": 0,
  "modified": "2025-09-03 14:52:08.481312",
  "module": null,
  "name": "Cloud Setup In Company Setup Wizard",
  "script": "frappe.ui.form.on('Company', {\r\n    onload: function(frm) {\r\n        frm.set_df_property('custom_cloud_server_ip', 'in_setup_wizard', 1);\r\n        frm.set_df_property('custom_cloud_server_ip', 'reqd', 1);\r\n\r\n        frm.set_df_property('custom_cloud_database_name', 'in_setup_wizard', 1);\r\n        frm.set_df_property('custom_cloud_database_name', 'reqd', 1);\r\n\r\n        frm.set_df_property('custom_cloud_database_password', 'in_setup_wizard', 1);\r\n        frm.set_df_property('custom_cloud_database_password', 'reqd', 1);\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 0,
  "modified": "2025-09-03 16:42:40.275192",
  "module": null,
  "name": "Purchase Order Stock Update",
  "script": "frappe.ui.form.on(\"Purchase Order\", {\r\n    before_submit: function(frm) {\r\n        // Ask for a note before submit\r\n        frappe.prompt([\r\n            {\"fieldname\": \"po_note\", \"fieldtype\": \"Small Text\", \"label\": \"Note\", \"reqd\": 1}\r\n        ],\r\n        function(values){\r\n            frm.set_value(\"po_note\", values.po_note); // Save note in PO field\r\n            frm.save(); // Ensure note is saved before submit\r\n            frm.submit(); // Now submit PO\r\n        },\r\n        \"Enter Note\",\r\n        \"Submit\");\r\n        // Cancel default submit to wait for prompt\r\n        frappe.validated = false;\r\n    },\r\n    on_submit: function(frm) {\r\n        // Call server-side method to create stock entry\r\n        frappe.call({\r\n            method: \"quantra.api.custom_purchase_order.update_stock\",\r\n            args: {\r\n                purchase_order: frm.doc.name\r\n            },\r\n            callback: function(r) {\r\n                if(r.message) {\r\n                    frappe.msgprint(\"Stock updated successfully\");\r\n                }\r\n            }\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 }
]